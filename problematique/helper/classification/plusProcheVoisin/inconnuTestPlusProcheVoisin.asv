function [inconnuNP300, inconnuP300] = errorTestPlusProcheVoisin(inconnus, baricentreNP300, baricentreP300, k)
    %% Initialisation
    inconnuNP300 = [];
    inconnuP300 = [];
        
    errorNP300 = 0;
    errorP300 = 0;
    
    test_InconnuSize = size(inconnus, 1);
    
    for index = 1:test_InconnuSize  
        %% Calcule de la distance
        A = inconnuNP300(index, :);
        temp_nP300 = baricentreNP300;
        temp_P300  = baricentreP300;
        
        for kIndex = 1:k
            distance_from_P300 = sum((temp_P300 - A) .^ 2, 2);
            distance_from_NP300 = sum((temp_nP300 - A) .^ 2, 2);
        
            min_distance_from_P300 = min(distance_from_P300);
            min_distance_from_NP300 = min(distance_from_NP300);
            
            if (min_distance_from_P300 < min_distance_from_NP300)
                inconnuP300 = [inconnuP300; temp_P300(distance_from_P300 == min(distance_from_P300),:)];
                temp_P300(distance_from_P300 == min(distance_from_P300),:) = [];
            else
                inconnuNP300 = [inconnuNP300; temp_nP300(distance_from_NP300 == min(distance_from_NP300),:)];
                temp_nP300(distance_from_NP300 == min(distance_from_NP300),:) = [];
            end
        end
    end
    
    test_InconnuSize = size(inconnus, 1);
    
    fprintf('=========================== \n');
    fprintf('Inconnus              \n', k);
    fprintf('K              = %.4f \n', k);
    fprintf('Inconnu P300     = %.4f \n', ((test_P300size - errorP300)/test_P300size) * 100);
    fprintf('Error NP300    = %.4f \n', ((test_nP300size - errorNP300)/test_nP300size) * 100);
    fprintf('=========================== \n');
end

